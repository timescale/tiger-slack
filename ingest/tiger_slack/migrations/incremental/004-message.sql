--004-message.sql

-----------------------------------------------------------------------
-- slack.message_discard
create table slack.message_discard
( id int4 not null primary key generated by default as identity
, match jsonpath not null
, note text
);

-----------------------------------------------------------------------
-- slack.message
create table slack.message
( ts timestamptz not null
, channel_id text not null
, team text
, text text
, type text
, user_id text
, blocks jsonb
, event_ts timestamptz
, thread_ts timestamptz
, channel_type text
, client_msg_id uuid
, parent_user_id text
, updated_at timestamptz
, bot_id text
, attachments jsonb
, files jsonb
, app_id text
, subtype text
, trigger_id text
, workflow_id text
, display_as_bot boolean
, upload boolean
, x_files jsonb
, icons jsonb
, language jsonb
, edited jsonb
, reactions jsonb
)
with
( tsdb.hypertable
, tsdb.partition_column='ts'
, tsdb.enable_columnstore=true
, tsdb.segmentby = 'channel_id'
, tsdb.orderby = 'ts desc'
, tsdb.sparse_index='bloom(user_id),bloom(subtype),bloom(type),minmax(thread_ts),minmax(event_ts)'
);
create unique index on slack.message (channel_id, ts desc);
create index on slack.message (channel_id, thread_ts, ts asc) where thread_ts is not null;
create index on slack.message (channel_id, thread_ts, ts desc) where thread_ts is not null;
create index on slack.message (user_id, thread_ts, channel_id) where thread_ts is not null;

select set_chunk_time_interval('slack.message', interval '7 days');
select add_columnstore_policy('slack.message', after => interval '45 days');
select enable_chunk_skipping('slack.message', 'thread_ts');
select enable_chunk_skipping('slack.message', 'event_ts');
